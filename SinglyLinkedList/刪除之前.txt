#pragma once
#include <stdio.h>
#include <stdlib.h>
#include<time.h>

struct Node {
	int element;
	struct Node *next;
};
struct Node* first = new struct Node;

struct Node* last = first;

// For linked stack

struct Node* top = new struct Node;

// For linked queue

struct Node* head = new struct Node;



namespace CppCLRWinFormsProject {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;

	/// <summary>
	/// Summary for Form1
	/// </summary>
	public ref class Form1 : public System::Windows::Forms::Form
	{
	public:
		Form1(void)
		{
			InitializeComponent();
			//
			//TODO: Add the constructor code here
			//
			first->element = -1;

			first->next = first;

			top->element = -1;

			top->next = NULL;

			head->element = -1;

			head->next = NULL;
		}

	protected:
		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		~Form1()
		{
			if (components)
			{
				delete components;
			}
		}
	private: System::Windows::Forms::TabControl^ tabControl1;
	protected:
	private: System::Windows::Forms::TabPage^ tabPage1;
	private: System::Windows::Forms::TextBox^ textBox_target;

	private: System::Windows::Forms::TextBox^ textBox1;
	private: System::Windows::Forms::Label^ label2;
	private: System::Windows::Forms::Label^ label1;
	private: System::Windows::Forms::ListBox^ listBox1;
	private: System::Windows::Forms::TabPage^ tabPage2;
	private: System::Windows::Forms::Button^ button1;
	private: System::Windows::Forms::Button^ button_First;
	private: System::Windows::Forms::Button^ button4;
	private: System::Windows::Forms::Button^ button3;
	private: System::Windows::Forms::Button^ button2;
	private: System::Windows::Forms::Button^ button_Delete;

	private: System::Windows::Forms::Button^ button6;
	private: System::Windows::Forms::Button^ button7;
	private: System::Windows::Forms::RichTextBox^ richTextBox1;
	private: System::Windows::Forms::Button^ button_Print;

	private:
		/// <summary>
		/// Required designer variable.
		/// </summary>
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		void InitializeComponent(void)
		{
			this->tabControl1 = (gcnew System::Windows::Forms::TabControl());
			this->tabPage1 = (gcnew System::Windows::Forms::TabPage());
			this->richTextBox1 = (gcnew System::Windows::Forms::RichTextBox());
			this->button7 = (gcnew System::Windows::Forms::Button());
			this->button6 = (gcnew System::Windows::Forms::Button());
			this->button_Delete = (gcnew System::Windows::Forms::Button());
			this->button4 = (gcnew System::Windows::Forms::Button());
			this->button3 = (gcnew System::Windows::Forms::Button());
			this->button2 = (gcnew System::Windows::Forms::Button());
			this->button1 = (gcnew System::Windows::Forms::Button());
			this->button_First = (gcnew System::Windows::Forms::Button());
			this->textBox_target = (gcnew System::Windows::Forms::TextBox());
			this->textBox1 = (gcnew System::Windows::Forms::TextBox());
			this->label2 = (gcnew System::Windows::Forms::Label());
			this->label1 = (gcnew System::Windows::Forms::Label());
			this->listBox1 = (gcnew System::Windows::Forms::ListBox());
			this->tabPage2 = (gcnew System::Windows::Forms::TabPage());
			this->button_Print = (gcnew System::Windows::Forms::Button());
			this->tabControl1->SuspendLayout();
			this->tabPage1->SuspendLayout();
			this->SuspendLayout();
			// 
			// tabControl1
			// 
			this->tabControl1->Controls->Add(this->tabPage1);
			this->tabControl1->Controls->Add(this->tabPage2);
			this->tabControl1->Location = System::Drawing::Point(0, 0);
			this->tabControl1->Name = L"tabControl1";
			this->tabControl1->SelectedIndex = 0;
			this->tabControl1->Size = System::Drawing::Size(1346, 614);
			this->tabControl1->TabIndex = 0;
			// 
			// tabPage1
			// 
			this->tabPage1->Controls->Add(this->button_Print);
			this->tabPage1->Controls->Add(this->richTextBox1);
			this->tabPage1->Controls->Add(this->button7);
			this->tabPage1->Controls->Add(this->button6);
			this->tabPage1->Controls->Add(this->button_Delete);
			this->tabPage1->Controls->Add(this->button4);
			this->tabPage1->Controls->Add(this->button3);
			this->tabPage1->Controls->Add(this->button2);
			this->tabPage1->Controls->Add(this->button1);
			this->tabPage1->Controls->Add(this->button_First);
			this->tabPage1->Controls->Add(this->textBox_target);
			this->tabPage1->Controls->Add(this->textBox1);
			this->tabPage1->Controls->Add(this->label2);
			this->tabPage1->Controls->Add(this->label1);
			this->tabPage1->Controls->Add(this->listBox1);
			this->tabPage1->Location = System::Drawing::Point(4, 28);
			this->tabPage1->Name = L"tabPage1";
			this->tabPage1->Padding = System::Windows::Forms::Padding(3);
			this->tabPage1->Size = System::Drawing::Size(1338, 582);
			this->tabPage1->TabIndex = 0;
			this->tabPage1->Text = L"tabPage1";
			this->tabPage1->UseVisualStyleBackColor = true;
			// 
			// richTextBox1
			// 
			this->richTextBox1->Location = System::Drawing::Point(8, 382);
			this->richTextBox1->Name = L"richTextBox1";
			this->richTextBox1->Size = System::Drawing::Size(1324, 197);
			this->richTextBox1->TabIndex = 14;
			this->richTextBox1->Text = L"";
			// 
			// button7
			// 
			this->button7->Location = System::Drawing::Point(44, 148);
			this->button7->Name = L"button7";
			this->button7->Size = System::Drawing::Size(208, 34);
			this->button7->TabIndex = 13;
			this->button7->Text = L"Clear all";
			this->button7->UseVisualStyleBackColor = true;
			// 
			// button6
			// 
			this->button6->Location = System::Drawing::Point(44, 107);
			this->button6->Name = L"button6";
			this->button6->Size = System::Drawing::Size(208, 35);
			this->button6->TabIndex = 12;
			this->button6->Text = L"Randomly insert n element";
			this->button6->UseVisualStyleBackColor = true;
			// 
			// button_Delete
			// 
			this->button_Delete->Location = System::Drawing::Point(579, 147);
			this->button_Delete->Name = L"button_Delete";
			this->button_Delete->Size = System::Drawing::Size(192, 35);
			this->button_Delete->TabIndex = 11;
			this->button_Delete->Text = L"Delete target";
			this->button_Delete->UseVisualStyleBackColor = true;
			this->button_Delete->Click += gcnew System::EventHandler(this, &Form1::button_Delete_Click);
			// 
			// button4
			// 
			this->button4->Location = System::Drawing::Point(825, 107);
			this->button4->Name = L"button4";
			this->button4->Size = System::Drawing::Size(329, 35);
			this->button4->TabIndex = 10;
			this->button4->Text = L"Find target and insert element before target";
			this->button4->UseVisualStyleBackColor = true;
			this->button4->Click += gcnew System::EventHandler(this, &Form1::button4_Click);
			// 
			// button3
			// 
			this->button3->Location = System::Drawing::Point(825, 42);
			this->button3->Name = L"button3";
			this->button3->Size = System::Drawing::Size(329, 38);
			this->button3->TabIndex = 9;
			this->button3->Text = L"Find target and insert element after target";
			this->button3->UseVisualStyleBackColor = true;
			this->button3->Click += gcnew System::EventHandler(this, &Form1::button3_Click);
			// 
			// button2
			// 
			this->button2->Location = System::Drawing::Point(579, 97);
			this->button2->Name = L"button2";
			this->button2->Size = System::Drawing::Size(192, 35);
			this->button2->TabIndex = 8;
			this->button2->Text = L"Find Target";
			this->button2->UseVisualStyleBackColor = true;
			this->button2->Click += gcnew System::EventHandler(this, &Form1::button2_Click);
			// 
			// button1
			// 
			this->button1->Location = System::Drawing::Point(305, 106);
			this->button1->Name = L"button1";
			this->button1->Size = System::Drawing::Size(223, 36);
			this->button1->TabIndex = 7;
			this->button1->Text = L"Insert \"Element\" as last";
			this->button1->UseVisualStyleBackColor = true;
			this->button1->Click += gcnew System::EventHandler(this, &Form1::button1_Click);
			// 
			// button_First
			// 
			this->button_First->Location = System::Drawing::Point(305, 44);
			this->button_First->Name = L"button_First";
			this->button_First->Size = System::Drawing::Size(223, 36);
			this->button_First->TabIndex = 6;
			this->button_First->Text = L"Insert \"Element\" as first";
			this->button_First->UseVisualStyleBackColor = true;
			this->button_First->Click += gcnew System::EventHandler(this, &Form1::button_First_Click);
			// 
			// textBox_target
			// 
			this->textBox_target->Font = (gcnew System::Drawing::Font(L"新細明體", 12));
			this->textBox_target->Location = System::Drawing::Point(671, 42);
			this->textBox_target->Name = L"textBox_target";
			this->textBox_target->Size = System::Drawing::Size(100, 36);
			this->textBox_target->TabIndex = 5;
			// 
			// textBox1
			// 
			this->textBox1->Font = (gcnew System::Drawing::Font(L"新細明體", 12));
			this->textBox1->Location = System::Drawing::Point(152, 44);
			this->textBox1->Name = L"textBox1";
			this->textBox1->Size = System::Drawing::Size(100, 36);
			this->textBox1->TabIndex = 4;
			this->textBox1->Text = L"10";
			// 
			// label2
			// 
			this->label2->AutoSize = true;
			this->label2->Font = (gcnew System::Drawing::Font(L"新細明體", 12));
			this->label2->Location = System::Drawing::Point(575, 47);
			this->label2->Name = L"label2";
			this->label2->Size = System::Drawing::Size(81, 24);
			this->label2->TabIndex = 3;
			this->label2->Text = L"Target :";
			// 
			// label1
			// 
			this->label1->AutoSize = true;
			this->label1->Font = (gcnew System::Drawing::Font(L"新細明體", 12));
			this->label1->Location = System::Drawing::Point(40, 49);
			this->label1->Name = L"label1";
			this->label1->Size = System::Drawing::Size(97, 24);
			this->label1->TabIndex = 2;
			this->label1->Text = L"Element :";
			// 
			// listBox1
			// 
			this->listBox1->FormattingEnabled = true;
			this->listBox1->ItemHeight = 18;
			this->listBox1->Location = System::Drawing::Point(8, 200);
			this->listBox1->Name = L"listBox1";
			this->listBox1->Size = System::Drawing::Size(1324, 166);
			this->listBox1->TabIndex = 1;
			// 
			// tabPage2
			// 
			this->tabPage2->Location = System::Drawing::Point(4, 28);
			this->tabPage2->Name = L"tabPage2";
			this->tabPage2->Padding = System::Windows::Forms::Padding(3);
			this->tabPage2->Size = System::Drawing::Size(1338, 582);
			this->tabPage2->TabIndex = 1;
			this->tabPage2->Text = L"tabPage2";
			this->tabPage2->UseVisualStyleBackColor = true;
			// 
			// button_Print
			// 
			this->button_Print->Location = System::Drawing::Point(305, 159);
			this->button_Print->Name = L"button_Print";
			this->button_Print->Size = System::Drawing::Size(223, 35);
			this->button_Print->TabIndex = 15;
			this->button_Print->Text = L"Print list";
			this->button_Print->UseVisualStyleBackColor = true;
			this->button_Print->Click += gcnew System::EventHandler(this, &Form1::button_Print_Click);
			// 
			// Form1
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(9, 18);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->ClientSize = System::Drawing::Size(1342, 615);
			this->Controls->Add(this->tabControl1);
			this->Name = L"Form1";
			this->Text = L"Form1";
			this->tabControl1->ResumeLayout(false);
			this->tabPage1->ResumeLayout(false);
			this->tabPage1->PerformLayout();
			this->ResumeLayout(false);

		}

		//requirement (2.1)
		//在環狀串列中新增最前節點
		void InsertFirst(int element) {
			
			struct Node* newNode = new struct Node;
			newNode->element = element;
			newNode->next = first->next;
			first->next = newNode;

			if (last == first) { // 如果是第一個加入的節點

				last = newNode;

			}
		}
		//requirement (2.2)
		//在環狀串列中新增最後節點
		void InsertLast(int element) {
			struct Node* N = new struct Node;
			N->element = element;
			N->next = first;
			last->next = N;
			last = N;
		
		}
		
		//requirement 1
		void PrintList(){
			struct Node* current = first->next;
			
			while (current != first) {

				richTextBox1->Text += current->element.ToString() + "->";
				current = current->next;
			
			}

			richTextBox1->Text += "\n";
		}

		//void FindTarget(int target,int mode) {

		//	struct Node* cur = first->next;
		//	struct Node* pre = first;

		//	int data = Int32::Parse(textBox1->Text);
		//	struct Node* newNode = new struct Node;

		//	while (cur != first) {
		//		//listBox1->Items->Add(target + "," + mode);
		//		//處理只單純做Find target
		//		if (cur->element == target && (mode == 0))  {
		//			
		//			richTextBox1->Text +="Success find target : '" + target + "' in the list\n";
		//			listBox1->Items->Add(first->next->element);
		//			break;
		//			
		//		}
		//		//處理Insert在target之前
		//		else if (cur->element == target && (mode == -1)) {

		//			newNode->element = data;
		//			newNode->next = cur;
		//			pre->next = newNode;
		//			richTextBox1->Text += "Success find " + target + "  ,and Insert " + data + " before target\n";
		//			PrintList();
		//			return;
		//		}
		//		//處理Insert在target之後
		//		else if (cur->element == target && (mode == 1)) {
		//			newNode->next = cur->next;
		//			cur->next = newNode;
		//			newNode->element = data;
		//			richTextBox1->Text += "Success find " + target + "  ,and Insert " + data + " after target\n";
		//			PrintList();
		//			return;
		//			
		//		}
		//		//處理刪除target
		//		//else if (cur->element == target && (mode == 2)) {
		//		//	if (cur != head) {
		//		//		pre->next = cur->next;
		//		//		free(cur);
		//		//		richtextbox1->text += "success delete " + target + "\n";
		//		//		printlist();
		//		//		return;
		//		//	}else if (cur == head) {
		//		//		richtextbox1->text += "nothing can delete!\n";
		//		//		return;
		//		//	}

		//		//}
		//		
		//		pre->next = cur;
		//		cur = cur->next;

		//	}
		//	
		//	richTextBox1->Text += "\n";
		//	richTextBox1->Text += "NOT Find target :" + target +"\n";

		//}
		bool Find(int target) {

			struct Node* cur = first->next;

			while (cur != first) {

				if (cur->element == target) {

					return true;

				}

				cur = cur->next;

			}
			
			return false;

		}
		void InsertBeforeTarget(int target,int data) {

			if (Find(target) == true) {
				struct Node* cur = first->next;
				struct Node* pre = first;
				
				struct Node* newNode = new struct Node;

				while (cur != first) {

					if (cur->element == target) {
					
						newNode->element = data;
						newNode->next = cur;
						pre->next = newNode;
						richTextBox1->Text += "Success find " + target + "  ,and Insert " + data + " before target\n";
						break;
					}

					pre = cur;
					cur = cur->next;

				}

				PrintList();

			}
			else {
				richTextBox1->Text += "NOT Find target :" + target + "\n";
			}


		}
		
		void InsertAfterTarget(int target, int  data) {

			if (Find(target) == true) {
				struct Node* cur = first->next;
				struct Node* newNode = new struct Node;

				while (cur != first) {

					if (cur->element == target) {

						newNode->element = data;
						newNode->next = cur->next;
						cur->next = newNode;
						
						richTextBox1->Text += "Success find " + target + "  ,and Insert " + data + " After target\n";
						break;
					}

					
					cur = cur->next;

				}

				PrintList();

			}
			else {
				richTextBox1->Text += "NOT Find target :" + target + "\n";
			}

		}

		
#pragma endregion
	private: System::Void button_First_Click(System::Object^ sender, System::EventArgs^ e) {
		int insertdata;
		insertdata = Int32::Parse(textBox1->Text);
		InsertFirst(insertdata);
		PrintList();
	}
	private: System::Void button1_Click(System::Object^ sender, System::EventArgs^ e) {
		int insertdata;
		insertdata = Int32::Parse(textBox1->Text);
		InsertLast(insertdata);
		PrintList();

	}

	private: System::Void button2_Click(System::Object^ sender, System::EventArgs^ e) {
		int target;
		target = Int32::Parse(textBox_target->Text);
		if (Find(target) != true) {
		
			richTextBox1->Text += "NOT Find target :" + target + "\n";

		}
		else {
			richTextBox1->Text += "Success find target : '" + target + "' in the list\n";
		};

	}
	private: System::Void button4_Click(System::Object^ sender, System::EventArgs^ e) {
		int target, element;
		target = Int32::Parse(textBox_target->Text);
		element = Int32::Parse(textBox1->Text);
		InsertBeforeTarget(target,element);

	}
	private: System::Void button3_Click(System::Object^ sender, System::EventArgs^ e) {
		int target,element;
		target = Int32::Parse(textBox_target->Text);
		element = Int32::Parse(textBox1->Text);
		InsertAfterTarget(target,element);

	}

	private: System::Void button_Delete_Click(System::Object^ sender, System::EventArgs^ e) {
		int target;
		target = Int32::Parse(textBox_target->Text);
		Delete(target);
	}
	private: System::Void button_Print_Click(System::Object^ sender, System::EventArgs^ e) {
		PrintList();
	}
};
}
